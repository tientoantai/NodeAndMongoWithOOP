var BCryptHasher = function (bcrypt) {
    this.bcrypt = bcrypt;
};

/**
 * Set round for bcrypt algorithm
 *
 * @param round
 */
BCryptHasher.prototype.setRound = function (round) {
    this.round = round;
};

/**
 * Set a secure key for later random hash
 * generation
 *
 * @param key
 */
BCryptHasher.prototype.setKey = function (key) {
    this.key = key;
};

/**
 * Generate a hash with given value
 *
 * @param value
 */
BCryptHasher.prototype.hash = function (value) {
    return this.bcrypt.hashSync(value, this.bcrypt.genSaltSync(this.round));
};

/**
 * Compare hash and its value
 *
 * @param value
 * @param hashed
 *
 * @return bool
 */
BCryptHasher.prototype.check = function (value, hashed) {
    return this.bcrypt.compareSync(value, hashed);
};

/**
 * Generates a random unique hash
 *
 * @return string
 */
BCryptHasher.prototype.generate = function () {
    return this.hash(this.key);
};

/**
 * Check if the hashed value is generated by this
 * hasher
 *
 * @param hashed
 * @return bool
 */
BCryptHasher.prototype.verify = function (hashed) {
    return this.check(this.key, hashed);
};

module.exports = BCryptHasher;